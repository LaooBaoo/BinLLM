model:
  arch: mini_gpt4rec_v2 # by default
  model_type: pretrain_vicuna
  freeze_rec: True  # 
  freeze_proj: True #    
  freeze_lora: False #
  max_txt_len: 1024 # by default
  proj_token_num: 1 # default:1,  the number of text token embeddings that the A single ID embedding is converted into
  proj_drop: 0 # by default
  proj_mid_times: 10 # proj_mid_times * rec embedding size = the middle layer size of the mapping module
  end_sym: "###"
  prompt_path: "prompts/hash_text.txt"
  prompt_template: '{}'
  llama_model: "/dataLLM/PretrainedModels/vicuna/working-v0/" #vicuna path
  user_num: -100
  item_num: -100
  ans_type: 'v2' # by default
  rec_model: "hash" #[MF, lightgcn,.....], see "Rec2Base" class in  minigpt4/models/rec_model.py
  lora_config:
    use_lora: True
    r: 8
    alpha: 16
    target_modules: ["q_proj", "v_proj"] # default: ["q_proj", "v_proj"]; others? ['lm_head'], ["q_proj", "v_proj",'k_proj','o_proj'] 
    dropout: 0.05
  rec_config: # recommender model config
    user_num: -100
    item_num: -100
    embedding_size: 32 #embedding size
    code_mode: 'binary' #'ipv4' #'binary'
    use_hash: False
    pretrained_path: /data1cf4reclog-cc/hash/0130hashGNN-ml-32lr-0.01wd0.001.pth # pretrained rec model 


  ckpt: /data1cf4reclog-cc/20240131205/checkpoint_best.pth # tallrec


  

datasets:
  amazon_ood:
    path: "/data/datasets/ml-1m/" #data path
    data_type: default
    build_info:
      storage: "/data/datasets/ml-1m/" # data path

run:
  task: rec_pretrain
  lr_sched: "linear_warmup_cosine_lr"
  init_lr: 1e-4
  min_lr: 8e-5
  warmup_lr: 1e-5
  mode: 'v3' # hash-text encoding 


  weight_decay: 1e-3 # by default
  max_epoch: 200
  iters_per_epoch: 50 #100 
  batch_size_train: 4 #16 # 8
  batch_size_eval: 64 # 32
  num_workers: 4
  warmup_steps: 200

  seed: 42
  output_dir:  /data/cf4reclog/ #log and model saving path

  amp: True
  resume_ckpt_path: null #/home/sistLLM/cf4recLog/20240107182/checkpoint_best.pth #null

  evaluate: False #True # False: training, True: only evaluation 
  train_splits: ["train"] 
  valid_splits: ["valid"] # validation set
  test_splits: ["test","valid"] # used when evluate=True, reporting both the testing and validation results

  device: "cuda"
  world_size: 1
  dist_url: "env://"
  distributed: True
